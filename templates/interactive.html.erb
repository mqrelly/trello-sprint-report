<%

$barchart_max_height = 300;

def bar_height_in_px(card_count)
  relative_height = card_count.to_f / all_card_ids.count
  (relative_height * $barchart_max_height).to_i
end

$incoming_picture = "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"

$abandoned_picture = "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"

%>

<html>
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <title>Sprint Report <%= start_date %> - <%= end_date %></title>
  <style>
    .report {
      margin: 50px;
      font-family: "Tahoma", sans-serif;
      font-size: 14pt;
      color: #333;
    }

    .layout {
      display: grid;
      grid-template-columns: repeat(<%= lists.count + 2 %>, 1fr);
      max-width: <%= (lists.count + 2)*300 %>px;
      margin: 0 auto;
    }

    h1, h2, h3 {
      margin-left: -10px;
    }

    h3 {
      grid-column: 1 / -1;
      margin-bottom: 10px;
    }

    .label-symbol {
      display: inline-block;
      border: solid 15px;
      border-radius: 3px;
    }

    .label-symbol.tag {
      border-left-width: 17px;
      border-right-width: 17px;
      border-top-width: 4px;
      border-bottom-width: 4px;
    }

    .label.green .name,
    .label-symbol.green {
      color: #61BD4F;
      border-color: #61BD4F;
    }

    .label.yellow .name,
    .label-symbol.yellow {
      color: #F2D600;
      border-color: #F2D600;
    }

    .label.orange .name,
    .label-symbol.orange {
      color: #FFAB4A;
      border-color: #FFAB4A;
    }

    .label.red .name,
    .label-symbol.red {
      color: #EB5A46;
      border-color: #EB5A46;
    }

    .label.purple .name,
    .label-symbol.purple {
      color: #C377E0;
      border-color: #C377E0;
    }

    .label.blue .name,
    .label-symbol.blue {
      color: #0079BF;
      border-color: #0079BF;
    }

    .label.sky .name,
    .label-symbol.sky {
      color: #00C2E0;
      border-color: #00C2E0;
    }

    .label.pink .name,
    .label-symbol.pink {
      color: #FF80CE;
      border-color: #FF80CE;
    }

    .label.black .name,
    .label-symbol.black {
      color: #4d4d4d;
      border-color: #4d4d4d;
    }

    .label.green.visible .name {
      background-color: #61BD4F;
    }

    .label.yellow.visible .name {
      background-color: #F2D600;
    }

    .label.orange.visible .name {
      background-color: #FFAB4A;
    }

    .label.red.visible .name {
      background-color: #EB5A46;
    }

    .label.purple.visible .name {
      background-color: #C377E0;
    }

    .label.blue.visible .name {
      background-color: #0079BF;
    }

    .label.sky.visible .name {
      background-color: #00C2E0;
    }

    .label.pink.visible .name {
      background-color: #FF80CE;
    }

    .label.black.visible .name {
      background-color: #4d4d4d;
    }    

    .list {
      list-style: none;
      padding-left: inherit;
    }

    .labels.list {
      grid-column: 1 / -1;
      display: flex;
      flex-wrap: wrap;
      margin: 0;
    }

    .labels.list .label {
      margin: 5px 10px 5px 0;
    }

    .labels.list > li > * {
      display: inline-block;
      vertical-align: middle;
    }

    .label .name {
      font-size: 16px;
      font-weight: bold;
      border: solid 2px gray;
      border-radius: 5px;
      padding: 5px 8px;
      cursor: pointer;
    }

    .label.visible .name {
      color: white;
    }

    .label .statistics {
      font-size: 13pt;
      font-style: italic;
      color: gray;
    }

    .barchart.column {
      position: relative;
      min-width: 100px;

      display: flex;
      flex-flow: column-reverse nowrap;
      align-items: center;
    }

    .barchart.column .bar {
      width: 50px;
      margin: 10px 0;
      background-color: silver;
    }

    .barchart.column .label {
      white-space: nowrap;
      overflow: hidden;
      padding: 0 2px;
    }

    .barchart.column .amount {
      position: relative;
      height: 36px;
      width: 36px;
      text-align: center;
      line-height: 36px;
      vertical-align: middle;
      border: solid 2px gray;
      border-radius: 19px;
    }

    .barchart.column .picture {
      width: 64px;
      margin-top: 10px;
      margin-bottom: 5px;
    }


    #search-box {
      margin-left: 10px;
      padding-bottom: 4px;
    }

    #search-box.open {
      border-bottom: solid 1px gray;
      padding-bottom: 3px;
    }

    #search-box * {
      vertical-align: middle;
      cursor: pointer;
    }

    #search-terms {
      border: none;
      display: none;
    }

    #search-box.open #search-terms {
      display: inline;
    }

    #clear-search {
      display: none;
    }

    #search-box.open #clear-search {
      display: inline;
    }

    .cards.list {
      display: inline-block;
      margin: 0;
    }

    .card {
      display: none;
      margin: 10px 5px;
      padding: 8px;
      background: #f2f2f2;
      border-radius: 5px;
    }

    .card.visible {
      display: block;
    }

    .card .name,
    .card .name * {
      color: inherit;
      text-decoration: none;
    }

    .card .name img {
      width: 20px;
    }

    .card .labels {
      font-size: 0;
      margin-top: 5px;
    }

    .card .labels .label-symbol {
      margin-right: 5px;
    }

  </style>

  <script>
     document.addEventListener("readystatechange", () => {
      if(document.readyState === "interactive") {
        const DATA = <%= data_as_json %>;

        let STATE = {
          labelFilter: [],
          searchTerms: null
        };

        const UI = {
          labels: DATA.labels
            .map(label => { 
              return {
                id: label.id,
                element: document.getElementById(`label_${label.id}`)
              };
            })
            .reduce((map, label) => {
              map[label.id] = label.element;
              return map;
            }, {}),
          
          searchBox: document.getElementById("search-box"),
          searchIcon: document.getElementById("search-icon"),
          searchTerms: document.getElementById("search-terms"),
          clearSearch: document.getElementById("clear-search"),

          cards: DATA.cards
            .map(card => {
              return {
                id: card.id,
                elements: Array.prototype.slice.call(document.getElementsByClassName(`card_${card.id}`))
              };
            })
            .reduce((map, label) => {
              map[label.id] = label.elements;
              return map;
            }, {})
        };

        DATA.labels.forEach(l => UI.labels[l.id].addEventListener("click",
          () => toggleLabelFilter(UI, DATA, STATE, l.id)));
        
        UI.searchTerms.addEventListener("keyup", () => searchFor(UI, DATA, STATE, UI.searchTerms.value));
        UI.searchTerms.addEventListener("blur", () => closeSearch(UI, DATA, STATE, false));
        UI.searchIcon.addEventListener("click", () => openSearch(UI));
        UI.clearSearch.addEventListener("click", () => closeSearch(UI, DATA, STATE, true));

        function updateView(ui, data, state) {
          data.labels.forEach(label => {
            if(isLabelVisible(label)) {
              ui.labels[label.id].classList.add("visible");
            } else {
              ui.labels[label.id].classList.remove("visible");
            }
          });

          data.cards.forEach(card => {
            if(isCardFilteredByLabels(card) && isCardMatchedByTextSearch(card)) {
              UI.cards[card.id].forEach(cardEl => cardEl.classList.add("visible"));
            } else {
              UI.cards[card.id].forEach(cardEl => cardEl.classList.remove("visible"));
            }
          });

          function isLabelVisible(label) {
            return state.labelFilter.length === 0 ||
              state.labelFilter.includes(label.id);
          }

          function isCardFilteredByLabels(card) {
            return state.labelFilter.length === 0 ||
              card.labels
                .map(l => l.id)
                .some(id => state.labelFilter.includes(id));
          }

          function isCardMatchedByTextSearch(card) {
            return state.searchTerms === null ||
              card.name.toLocaleLowerCase().includes(state.searchTerms);
          }
        }

        function toggleLabelFilter(ui, data, state, id) {
          const idx = state.labelFilter.indexOf(id);
          if(idx === -1) {
            state.labelFilter.push(id);
            if(state.labelFilter.length === data.labels.length) {
              state.labelFilter = [];
            }
          } else {
            state.labelFilter.splice(idx, 1);
          }

          updateView(ui, data, state);
        }

        function openSearch(ui) {
          ui.searchBox.classList.add("open");
          ui.searchTerms.focus();
        }

        function closeSearch(ui, data, state, force) {
          if(ui.searchTerms.value !== "") {
            if(!force) {
              return;
            }

            ui.searchTerms.value = "";
            searchFor(ui, data, state, "");
          }

          ui.searchBox.classList.remove("open");
        }

        function searchFor(ui, data, state, searchTerms) {
          searchTerms = searchTerms || null;
          if(searchTerms) {
            searchTerms = searchTerms.toLocaleLowerCase();
          }

          if(searchTerms !== state.searchTerms) {
            state.searchTerms = searchTerms;
            updateView(ui, data, state);
          }
        }
      }
    });
  </script>
</head>

<body class="report">

  <h1>Sprint Report</h1>
  <h2><%= start_date %> - <%= end_date %> (<%= sprint_days %> days)</h2>

  <div class="layout">

    <h3>Progress</h3>

    <div class="barchart column">
      <div class="label">Incoming</div>
      <div class="picture">
        <img src="data:image/png;base64,<%= $incoming_picture %>"/>
      </div>
      <div class="amount"><%= incoming_card_ids.count %></div>
    </div>

  <% lists.each_with_index do |list, idx| %>
    <div class="barchart column">
      <div class="label"><%= list["name"] %></div>
      <div class="bar" style="height: <%= bar_height_in_px(list["cards"].count) %>px;"></div>
      <div class="amount"><%= list["cards"].count %></div>
    </div>
  <% end %>

    <div class="barchart column">
      <div class="label">Abandoned</div>
      <div class="picture">
        <img src="data:image/png;base64,<%= $abandoned_picture %>"/>
      </div>
      <div class="amount"><%= abandoned_card_ids.count %></div>
    </div>


    <h3>Labels</h3>

    <ul class="labels list">
      <% all_label_ids.map{|id| label(id)}.each do |label| %>
        <li class="label <%= label["color"] %> visible" id="label_<%= label["id"] %>">
          <span class="name"><%= label["name"] %></span>
          <span class="statistics">(<%= cards_with_label(label["id"]).length %> cards)</span>
        </li>
      <% end %>
    </ul>


    <h3>
      <span>Cards</span>
      <span id="search-box">
        <svg id="search-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-search"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>
        <input type="text" id="search-terms" />
        <svg id="clear-search" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
      </span>
    </h3>

    <ul class="cards list">
      <% incoming_card_ids.map{|id| card(id)}.each do |card| %>
      <li class="card <%= card["state"] %> visible card_<%= card["id"] %>">
        <div class="name">
          <a href="<%= card["shortUrl"] %>">
            <%= card["name"] %>
          </a>
        </div>
        <div class="labels">
          <% card["labels"].each do |label| %>
          <span class="label-symbol tag <%= label["color"] %>"></span>
          <% end %>
        </div>
      </li>
      <% end %>
    </ul>

    <% lists.each do |list| %>
    <ul class="cards list">
      <% list["cards"].each do |card| %>
      <li class="card <%= card["state"] %> visible card_<%= card["id"] %>">
        <div class="name">
          <a href="<%= card["shortUrl"] %>">
            <%= card["name"] %>
          </a>
        </div>
        <div class="labels">
          <% card["labels"].each do |label| %>
          <span class="label-symbol tag <%= label["color"] %>"></span>
          <% end %>
        </div>
      </li>
      <% end %>
    </ul>
    <% end %>

    <ul class="cards list">
      <% abandoned_card_ids.map{|id| card(id)}.each do |card| %>
      <li class="card <%= card["state"] %> visible card_<%= card["id"] %>">
        <div class="name">
          <a href="<%= card["shortUrl"] %>">
            <%= card["name"] %>
          </a>
        </div>
        <div class="labels">
          <% card["labels"].each do |label| %>
          <span class="label-symbol tag <%= label["color"] %>"></span>
          <% end %>
        </div>
      </li>
      <% end %>
    </ul>

  </div>

</body>
</html>
